for(i in 1:nrow(predval.test.springfall)){
predictedpower.test[predval.test.springfall[i,2]] = predval.test.springfall[i,1]
}
for(i in 1:nrow(predval.test.summer)){
predictedpower.test[predval.test.summer[i,2]] = predval.test.summer[i,1]
}
for(i in 1:nrow(predval.test.winter)){
predictedpower.test[predval.test.winter[i,2]] = predval.test.winter[i,1]
}
for(i in 1:nrow(predval.test.holiday)){
predictedpower.test[predval.test.holiday[i,2]] = predval.test.holiday[i,1]
}
## check whether the model is build well, based on adjusted R^2
adjrsq <- function(actual,estimate,k){
n <- length(actual)
sst <- sum((actual-mean(actual))^2)
ssr <- sum((actual-estimate)^2)
return(1 - (ssr/(n-k-1))/(sst/(n-k)) )
}
adjrsq.train <- adjrsq(actualpower.train,fittedpower.train,86)
adjrsq.test <- adjrsq(actualpower.test,predictedpower.test,86)
adjrsq.train
adjrsq.test # should be high enough
## Export the hourly fitted values (training set) and predicted power (test set)
write.table(fittedpower.train, "power_train_fit.txt",row.names=FALSE,col.names=FALSE)
write.table(predictedpower.test, "power_test_predict.txt",row.names=FALSE,col.names=FALSE)
rm(list = ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
scriptpath <- getwd()
cat("\014")
library(forecast)
using.sarma.resids <- TRUE # If true, fit auxiliary SARMA models to the residuals of the main linear models
## load the dataset
## (the training case is a year (Jan. 1st ~ Dec. 31th), and the test case is the next year)
trainset.hourly <- read.table("trainset_hourly.txt") # data with 8760 rows (1st, 2nd, ..., 8760th hour for a year: each time step is an hour)
trainset.daily <- read.table("trainset_daytype.txt") # data with 365 rows (each time step is a day)
testset.hourly <- read.table("testset_hourly.txt")
testset.daily <- read.table("testset_daytype.txt")
actualpower.train <- trainset.hourly$V8 # actual power load in the building of each hour
actualpower.test <- testset.hourly$V8
temperature.train <- trainset.hourly$V1 # outdoor temperature of each hour
temperature.test <- testset.hourly$V1
daylight.train <- trainset.hourly$V5 # sunshine metric of each hour
daylight.test <- testset.hourly$V5
daytype.train <- rep(trainset.daily$V1,each=24) # 1 for working days, 0 for holidays
daytype.test <- rep(testset.daily$V1,each=24)
monthind.hourly <- rep(rep(c(1,2,3,4,5,6,7,8,9,10,11,12),c(31,28,31,30,31,30,31,31,30,31,30,31)),each=24) # corresponding month for each time step
hourind.hourly <- rep(c(1:24),365) # corresponding hour for each time step (1,2,...,23,24 is repeated 365 times)
itemindex <- rep(c(1:8760)) # neccesary for combining elements in the actual temporal order
dataset.train <- data.frame(actualpower.train, temperature.train, daylight.train, daytype.train, monthind.hourly, hourind.hourly,itemindex)
dataset.test <- data.frame(actualpower.test, temperature.test, daylight.test, daytype.test, monthind.hourly, hourind.hourly,itemindex)
names(dataset.train) <- c("power","temp","light","daytype","month","hour","itemindex")
names(dataset.test) <- c("power","temp","light","daytype","month","hour","itemindex")
## divide the dataset into four subperiods
dataset.train.holiday <- dataset.train[dataset.train$daytype==0,] # Holidays
dataset.train.workday <- dataset.train[dataset.train$daytype==1,] # Working days
dataset.train.springfall <- dataset.train.workday[dataset.train.workday$month %in% c(4,10),] # April, October
dataset.train.summer <- dataset.train.workday[dataset.train.workday$month %in% c(5,6,7,8,9),] # May ~ September
dataset.train.winter <- dataset.train.workday[dataset.train.workday$month %in% c(11,12,1,2,3),] # October ~ March
dataset.test.holiday <- dataset.test[dataset.test$daytype==0,]
dataset.test.workday <- dataset.test[dataset.test$daytype==1,]
dataset.test.springfall <- dataset.test.workday[dataset.test.workday$month %in% c(4,10),]
dataset.test.summer <- dataset.test.workday[dataset.test.workday$month %in% c(5,6,7,8,9),]
dataset.test.winter <- dataset.test.workday[dataset.test.workday$month %in% c(11,12,1,2,3),]
## using ONLY the training set (NOT the test set), fit the main linear model for each subperiod
## WLS for summer and winter (to correctly estimate peak power), OLS for spring/fall and holiday
model.train.springfall <- lm(power ~ factor(hour), data=dataset.train.springfall)
model.train.summer <- lm(power ~ temp*factor(month) + temp*factor(hour) + light*factor(month), data=dataset.train.summer, weight=power)
model.train.winter <- lm(power ~ temp*factor(month) + temp*factor(hour) + light*factor(month), data=dataset.train.winter, weight=power)
model.train.holiday <- lm(power ~ factor(month) + factor(hour), data=dataset.train.holiday)
## for the test set, compute predicted power and residuals using the main linear model fitted by the training set
predval.test.springfall <- data.frame(predict(model.train.springfall,dataset.test.springfall),dataset.test.springfall$itemindex)
predval.test.summer <- data.frame(predict(model.train.summer,dataset.test.summer),dataset.test.summer$itemindex)
predval.test.winter <- data.frame(predict(model.train.winter,dataset.test.winter),dataset.test.winter$itemindex)
predval.test.holiday <- data.frame(predict(model.train.holiday,dataset.test.holiday),dataset.test.holiday$itemindex)
resid.test.springfall <- dataset.test.springfall$power - predval.test.springfall[,1]
resid.test.summer <- dataset.test.summer$power - predval.test.summer[,1]
resid.test.winter <- dataset.test.winter$power - predval.test.winter[,1]
resid.test.holiday <- dataset.test.holiday$power - predval.test.holiday[,1]
## using ONLY the training residuals of the main linear models, fit the auxiliary SARMA models
## (do NOT use test residuals of the main linear models for fitting the auxiliary SARMA models)
## then, obtain the fitted values of auxiliary SARMA models for training and test residuals of the main linear models
if(using.sarma.resids){
Box.test(model.train.springfall$residuals,lag=24,type="Ljung",fitdf=0) # p-value near 0, indicating autocorrelation
autoarima.springfall <- auto.arima(model.train.springfall$residuals, max.d=0, allowdrift=FALSE, allowmean=FALSE)
sarma.springfall <- Arima(model.train.springfall$residuals,
order = c(autoarima.springfall$arma[1],0,autoarima.springfall$arma[2]),
seasonal= list(order = c(1,0,1), period=24), include.mean=FALSE)
Box.test(sarma.springfall$residuals,lag=24,type="Ljung",fitdf=0) # p-value should be over 0.1
auxfitval.train.springfall <- sarma.springfall$fitted
#auxfitval.test.springfall <- Arima(resid.test.springfall, model=sarma.springfall)$fitted
auxfitval.test.springfall <- Arima(resid.test.springfall,
order = c(autoarima.springfall$arma[1],0,autoarima.springfall$arma[2]),
seasonal= list(order = c(1,0,1), period=24), include.mean=FALSE)
Box.test(model.train.summer$residuals,lag=24,type="Ljung",fitdf=0)
autoarima.summer <- auto.arima(model.train.summer$residuals, max.d=0, allowdrift=FALSE, allowmean=FALSE)
sarma.summer <- Arima(model.train.summer$residuals,
order = c(autoarima.summer$arma[1],0,autoarima.summer$arma[2]),
seasonal= list(order = c(1,0,1), period=24), include.mean=FALSE)
Box.test(sarma.summer$residuals,lag=24,type="Ljung",fitdf=0)
auxfitval.train.summer <- sarma.summer$fitted
#auxfitval.test.summer <- Arima(resid.test.summer, model=sarma.summer)$fitted
auxfitval.test.summer <- Arima(resid.test.summer,
order = c(autoarima.summer$arma[1],0,autoarima.summer$arma[2]),
seasonal= list(order = c(1,0,1), period=24), include.mean=FALSE)
Box.test(model.train.winter$residuals,lag=24,type="Ljung",fitdf=0)
autoarima.winter <- auto.arima(model.train.winter$residuals, max.d=0, allowdrift=FALSE, allowmean=FALSE)
sarma.winter <- Arima(model.train.winter$residuals,
order = c(autoarima.winter$arma[1],0,autoarima.winter$arma[2]),
seasonal= list(order = c(1,0,1), period=24), include.mean=FALSE)
Box.test(sarma.winter$residuals,lag=24,type="Ljung",fitdf=0)
auxfitval.train.winter <- sarma.winter$fitted
#auxfitval.test.winter <- Arima(resid.test.winter, model=sarma.winter)$fitted
auxfitval.test.winter <- Arima(resid.test.winter,
order = c(autoarima.winter$arma[1],0,autoarima.winter$arma[2]),
seasonal= list(order = c(1,0,1), period=24), include.mean=FALSE)
Box.test(model.train.holiday$residuals,lag=24,type="Ljung",fitdf=0)
autoarima.holiday <- auto.arima(model.train.holiday$residuals, max.d=0, allowdrift=FALSE, allowmean=FALSE)
sarma.holiday <- Arima(model.train.holiday$residuals,
order = c(autoarima.holiday$arma[1],0,autoarima.holiday$arma[2]),
seasonal= list(order = c(1,0,1), period=24), include.mean=FALSE)
Box.test(sarma.holiday$residuals,lag=24,type="Ljung",fitdf=0)
auxfitval.train.holiday <- sarma.holiday$fitted
#auxfitval.test.holiday <- Arima(resid.test.holiday, model=sarma.holiday)$fitted
auxfitval.test.holiday <- Arima(resid.test.holiday,
order = c(autoarima.holiday$arma[1],0,autoarima.holiday$arma[2]),
seasonal= list(order = c(1,0,1), period=24), include.mean=FALSE)
## add the fitted values of auxiliary model to the fitted values of the main linear model
fitval.train.springfall <- data.frame(model.train.springfall$fitted.values +auxfitval.train.springfall,
dataset.train.springfall$itemindex)
fitval.train.summer <- data.frame(model.train.summer$fitted.values +auxfitval.train.summer,
dataset.train.summer$itemindex)
fitval.train.winter <- data.frame(model.train.winter$fitted.values +auxfitval.train.winter,
dataset.train.winter$itemindex)
fitval.train.holiday <- data.frame(model.train.holiday$fitted.values +auxfitval.train.holiday,
dataset.train.holiday$itemindex)
predval.test.springfall[,1] <- predval.test.springfall[,1] + auxfitval.test.springfall
predval.test.summer[,1] <- predval.test.summer[,1] + auxfitval.test.summer
predval.test.winter[,1] <- predval.test.winter[,1] + auxfitval.test.winter
predval.test.holiday[,1] <- predval.test.holiday[,1] + auxfitval.test.holiday
## when using.sarma.resids == FALSE, ignore the auxiliary SARMA model
} else {
fitval.train.springfall <- data.frame(model.train.springfall$fitted.values,
dataset.train.springfall$itemindex)
fitval.train.summer <- data.frame(model.train.summer$fitted.values,
dataset.train.summer$itemindex)
fitval.train.winter <- data.frame(model.train.winter$fitted.values,
dataset.train.winter$itemindex)
fitval.train.holiday <- data.frame(model.train.holiday$fitted.values,
dataset.train.holiday$itemindex)
}
## combine the values in the actual temporal order
fittedpower.train <- rep(0,8760)
for(i in 1:nrow(fitval.train.springfall)){
fittedpower.train[fitval.train.springfall[i,2]] = fitval.train.springfall[i,1]
}
for(i in 1:nrow(fitval.train.summer)){
fittedpower.train[fitval.train.summer[i,2]] = fitval.train.summer[i,1]
}
for(i in 1:nrow(fitval.train.winter)){
fittedpower.train[fitval.train.winter[i,2]] = fitval.train.winter[i,1]
}
for(i in 1:nrow(fitval.train.holiday)){
fittedpower.train[fitval.train.holiday[i,2]] = fitval.train.holiday[i,1]
}
predictedpower.test <- rep(0,8760)
for(i in 1:nrow(predval.test.springfall)){
predictedpower.test[predval.test.springfall[i,2]] = predval.test.springfall[i,1]
}
for(i in 1:nrow(predval.test.summer)){
predictedpower.test[predval.test.summer[i,2]] = predval.test.summer[i,1]
}
for(i in 1:nrow(predval.test.winter)){
predictedpower.test[predval.test.winter[i,2]] = predval.test.winter[i,1]
}
for(i in 1:nrow(predval.test.holiday)){
predictedpower.test[predval.test.holiday[i,2]] = predval.test.holiday[i,1]
}
## check whether the model is build well, based on adjusted R^2
adjrsq <- function(actual,estimate,k){
n <- length(actual)
sst <- sum((actual-mean(actual))^2)
ssr <- sum((actual-estimate)^2)
return(1 - (ssr/(n-k-1))/(sst/(n-k)) )
}
adjrsq.train <- adjrsq(actualpower.train,fittedpower.train,86)
adjrsq.test <- adjrsq(actualpower.test,predictedpower.test,86)
adjrsq.train
adjrsq.test # should be high enough
## Export the hourly fitted values (training set) and predicted power (test set)
write.table(fittedpower.train, "power_train_fit.txt",row.names=FALSE,col.names=FALSE)
write.table(predictedpower.test, "power_test_predict.txt",row.names=FALSE,col.names=FALSE)
rm(list = ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
scriptpath <- getwd()
cat("\014")
library(forecast)
using.sarma.resids <- TRUE # If true, fit auxiliary SARMA models to the residuals of the main linear models
## load the dataset
## (the training case is a year (Jan. 1st ~ Dec. 31th), and the test case is the next year)
trainset.hourly <- read.table("trainset_hourly.txt") # data with 8760 rows (1st, 2nd, ..., 8760th hour for a year: each time step is an hour)
trainset.daily <- read.table("trainset_daytype.txt") # data with 365 rows (each time step is a day)
testset.hourly <- read.table("testset_hourly.txt")
testset.daily <- read.table("testset_daytype.txt")
actualpower.train <- trainset.hourly$V8 # actual power load in the building of each hour
actualpower.test <- testset.hourly$V8
temperature.train <- trainset.hourly$V1 # outdoor temperature of each hour
temperature.test <- testset.hourly$V1
daylight.train <- trainset.hourly$V5 # sunshine metric of each hour
daylight.test <- testset.hourly$V5
daytype.train <- rep(trainset.daily$V1,each=24) # 1 for working days, 0 for holidays
daytype.test <- rep(testset.daily$V1,each=24)
monthind.hourly <- rep(rep(c(1,2,3,4,5,6,7,8,9,10,11,12),c(31,28,31,30,31,30,31,31,30,31,30,31)),each=24) # corresponding month for each time step
hourind.hourly <- rep(c(1:24),365) # corresponding hour for each time step (1,2,...,23,24 is repeated 365 times)
itemindex <- rep(c(1:8760)) # neccesary for combining elements in the actual temporal order
dataset.train <- data.frame(actualpower.train, temperature.train, daylight.train, daytype.train, monthind.hourly, hourind.hourly,itemindex)
dataset.test <- data.frame(actualpower.test, temperature.test, daylight.test, daytype.test, monthind.hourly, hourind.hourly,itemindex)
names(dataset.train) <- c("power","temp","light","daytype","month","hour","itemindex")
names(dataset.test) <- c("power","temp","light","daytype","month","hour","itemindex")
## divide the dataset into four subperiods
dataset.train.holiday <- dataset.train[dataset.train$daytype==0,] # Holidays
dataset.train.workday <- dataset.train[dataset.train$daytype==1,] # Working days
dataset.train.springfall <- dataset.train.workday[dataset.train.workday$month %in% c(4,10),] # April, October
dataset.train.summer <- dataset.train.workday[dataset.train.workday$month %in% c(5,6,7,8,9),] # May ~ September
dataset.train.winter <- dataset.train.workday[dataset.train.workday$month %in% c(11,12,1,2,3),] # October ~ March
dataset.test.holiday <- dataset.test[dataset.test$daytype==0,]
dataset.test.workday <- dataset.test[dataset.test$daytype==1,]
dataset.test.springfall <- dataset.test.workday[dataset.test.workday$month %in% c(4,10),]
dataset.test.summer <- dataset.test.workday[dataset.test.workday$month %in% c(5,6,7,8,9),]
dataset.test.winter <- dataset.test.workday[dataset.test.workday$month %in% c(11,12,1,2,3),]
## using ONLY the training set (NOT the test set), fit the main linear model for each subperiod
## WLS for summer and winter (to correctly estimate peak power), OLS for spring/fall and holiday
model.train.springfall <- lm(power ~ factor(hour), data=dataset.train.springfall)
model.train.summer <- lm(power ~ temp*factor(month) + temp*factor(hour) + light*factor(month), data=dataset.train.summer, weight=power)
model.train.winter <- lm(power ~ temp*factor(month) + temp*factor(hour) + light*factor(month), data=dataset.train.winter, weight=power)
model.train.holiday <- lm(power ~ factor(month) + factor(hour), data=dataset.train.holiday)
## for the test set, compute predicted power and residuals using the main linear model fitted by the training set
predval.test.springfall <- data.frame(predict(model.train.springfall,dataset.test.springfall),dataset.test.springfall$itemindex)
predval.test.summer <- data.frame(predict(model.train.summer,dataset.test.summer),dataset.test.summer$itemindex)
predval.test.winter <- data.frame(predict(model.train.winter,dataset.test.winter),dataset.test.winter$itemindex)
predval.test.holiday <- data.frame(predict(model.train.holiday,dataset.test.holiday),dataset.test.holiday$itemindex)
resid.test.springfall <- dataset.test.springfall$power - predval.test.springfall[,1]
resid.test.summer <- dataset.test.summer$power - predval.test.summer[,1]
resid.test.winter <- dataset.test.winter$power - predval.test.winter[,1]
resid.test.holiday <- dataset.test.holiday$power - predval.test.holiday[,1]
## using ONLY the training residuals of the main linear models, fit the auxiliary SARMA models
## (do NOT use test residuals of the main linear models for fitting the auxiliary SARMA models)
## then, obtain the fitted values of auxiliary SARMA models for training and test residuals of the main linear models
if(using.sarma.resids){
Box.test(model.train.springfall$residuals,lag=24,type="Ljung",fitdf=0) # p-value near 0, indicating autocorrelation
autoarima.springfall <- auto.arima(model.train.springfall$residuals, max.d=0, allowdrift=FALSE, allowmean=FALSE)
sarma.springfall <- Arima(model.train.springfall$residuals,
order = c(autoarima.springfall$arma[1],0,autoarima.springfall$arma[2]),
seasonal= list(order = c(1,0,1), period=24), include.mean=FALSE)
Box.test(sarma.springfall$residuals,lag=24,type="Ljung",fitdf=0) # p-value should be over 0.1
auxfitval.train.springfall <- sarma.springfall$fitted
#auxfitval.test.springfall <- Arima(resid.test.springfall, model=sarma.springfall)$fitted
auxfitval.test.springfall <- Arima(resid.test.springfall,
order = c(autoarima.springfall$arma[1],0,autoarima.springfall$arma[2]),
seasonal= list(order = c(1,0,1), period=24), include.mean=FALSE)$fitted
Box.test(model.train.summer$residuals,lag=24,type="Ljung",fitdf=0)
autoarima.summer <- auto.arima(model.train.summer$residuals, max.d=0, allowdrift=FALSE, allowmean=FALSE)
sarma.summer <- Arima(model.train.summer$residuals,
order = c(autoarima.summer$arma[1],0,autoarima.summer$arma[2]),
seasonal= list(order = c(1,0,1), period=24), include.mean=FALSE)
Box.test(sarma.summer$residuals,lag=24,type="Ljung",fitdf=0)
auxfitval.train.summer <- sarma.summer$fitted
#auxfitval.test.summer <- Arima(resid.test.summer, model=sarma.summer)$fitted
auxfitval.test.summer <- Arima(resid.test.summer,
order = c(autoarima.summer$arma[1],0,autoarima.summer$arma[2]),
seasonal= list(order = c(1,0,1), period=24), include.mean=FALSE)$fitted
Box.test(model.train.winter$residuals,lag=24,type="Ljung",fitdf=0)
autoarima.winter <- auto.arima(model.train.winter$residuals, max.d=0, allowdrift=FALSE, allowmean=FALSE)
sarma.winter <- Arima(model.train.winter$residuals,
order = c(autoarima.winter$arma[1],0,autoarima.winter$arma[2]),
seasonal= list(order = c(1,0,1), period=24), include.mean=FALSE)
Box.test(sarma.winter$residuals,lag=24,type="Ljung",fitdf=0)
auxfitval.train.winter <- sarma.winter$fitted
#auxfitval.test.winter <- Arima(resid.test.winter, model=sarma.winter)$fitted
auxfitval.test.winter <- Arima(resid.test.winter,
order = c(autoarima.winter$arma[1],0,autoarima.winter$arma[2]),
seasonal= list(order = c(1,0,1), period=24), include.mean=FALSE)$fitted
Box.test(model.train.holiday$residuals,lag=24,type="Ljung",fitdf=0)
autoarima.holiday <- auto.arima(model.train.holiday$residuals, max.d=0, allowdrift=FALSE, allowmean=FALSE)
sarma.holiday <- Arima(model.train.holiday$residuals,
order = c(autoarima.holiday$arma[1],0,autoarima.holiday$arma[2]),
seasonal= list(order = c(1,0,1), period=24), include.mean=FALSE)
Box.test(sarma.holiday$residuals,lag=24,type="Ljung",fitdf=0)
auxfitval.train.holiday <- sarma.holiday$fitted
#auxfitval.test.holiday <- Arima(resid.test.holiday, model=sarma.holiday)$fitted
auxfitval.test.holiday <- Arima(resid.test.holiday,
order = c(autoarima.holiday$arma[1],0,autoarima.holiday$arma[2]),
seasonal= list(order = c(1,0,1), period=24), include.mean=FALSE)$fitted
## add the fitted values of auxiliary model to the fitted values of the main linear model
fitval.train.springfall <- data.frame(model.train.springfall$fitted.values +auxfitval.train.springfall,
dataset.train.springfall$itemindex)
fitval.train.summer <- data.frame(model.train.summer$fitted.values +auxfitval.train.summer,
dataset.train.summer$itemindex)
fitval.train.winter <- data.frame(model.train.winter$fitted.values +auxfitval.train.winter,
dataset.train.winter$itemindex)
fitval.train.holiday <- data.frame(model.train.holiday$fitted.values +auxfitval.train.holiday,
dataset.train.holiday$itemindex)
predval.test.springfall[,1] <- predval.test.springfall[,1] + auxfitval.test.springfall
predval.test.summer[,1] <- predval.test.summer[,1] + auxfitval.test.summer
predval.test.winter[,1] <- predval.test.winter[,1] + auxfitval.test.winter
predval.test.holiday[,1] <- predval.test.holiday[,1] + auxfitval.test.holiday
## when using.sarma.resids == FALSE, ignore the auxiliary SARMA model
} else {
fitval.train.springfall <- data.frame(model.train.springfall$fitted.values,
dataset.train.springfall$itemindex)
fitval.train.summer <- data.frame(model.train.summer$fitted.values,
dataset.train.summer$itemindex)
fitval.train.winter <- data.frame(model.train.winter$fitted.values,
dataset.train.winter$itemindex)
fitval.train.holiday <- data.frame(model.train.holiday$fitted.values,
dataset.train.holiday$itemindex)
}
## combine the values in the actual temporal order
fittedpower.train <- rep(0,8760)
for(i in 1:nrow(fitval.train.springfall)){
fittedpower.train[fitval.train.springfall[i,2]] = fitval.train.springfall[i,1]
}
for(i in 1:nrow(fitval.train.summer)){
fittedpower.train[fitval.train.summer[i,2]] = fitval.train.summer[i,1]
}
for(i in 1:nrow(fitval.train.winter)){
fittedpower.train[fitval.train.winter[i,2]] = fitval.train.winter[i,1]
}
for(i in 1:nrow(fitval.train.holiday)){
fittedpower.train[fitval.train.holiday[i,2]] = fitval.train.holiday[i,1]
}
predictedpower.test <- rep(0,8760)
for(i in 1:nrow(predval.test.springfall)){
predictedpower.test[predval.test.springfall[i,2]] = predval.test.springfall[i,1]
}
for(i in 1:nrow(predval.test.summer)){
predictedpower.test[predval.test.summer[i,2]] = predval.test.summer[i,1]
}
for(i in 1:nrow(predval.test.winter)){
predictedpower.test[predval.test.winter[i,2]] = predval.test.winter[i,1]
}
for(i in 1:nrow(predval.test.holiday)){
predictedpower.test[predval.test.holiday[i,2]] = predval.test.holiday[i,1]
}
## check whether the model is build well, based on adjusted R^2
adjrsq <- function(actual,estimate,k){
n <- length(actual)
sst <- sum((actual-mean(actual))^2)
ssr <- sum((actual-estimate)^2)
return(1 - (ssr/(n-k-1))/(sst/(n-k)) )
}
adjrsq.train <- adjrsq(actualpower.train,fittedpower.train,86)
adjrsq.test <- adjrsq(actualpower.test,predictedpower.test,86)
adjrsq.train
adjrsq.test # should be high enough
## Export the hourly fitted values (training set) and predicted power (test set)
write.table(fittedpower.train, "power_train_fit.txt",row.names=FALSE,col.names=FALSE)
write.table(predictedpower.test, "power_test_predict.txt",row.names=FALSE,col.names=FALSE)
rm(list = ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
scriptpath <- getwd()
cat("\014")
library(forecast)
using.sarma.resids <- TRUE # If true, fit auxiliary SARMA models to the residuals of the main linear models
## load the dataset
## (the training case is a year (Jan. 1st ~ Dec. 31th), and the test case is the next year)
trainset.hourly <- read.table("trainset_hourly.txt") # data with 8760 rows (1st, 2nd, ..., 8760th hour for a year: each time step is an hour)
trainset.daily <- read.table("trainset_daytype.txt") # data with 365 rows (each time step is a day)
testset.hourly <- read.table("testset_hourly.txt")
testset.daily <- read.table("testset_daytype.txt")
actualpower.train <- trainset.hourly$V8 # actual power load in the building of each hour
actualpower.test <- testset.hourly$V8
temperature.train <- trainset.hourly$V1 # outdoor temperature of each hour
temperature.test <- testset.hourly$V1
daylight.train <- trainset.hourly$V5 # sunshine metric of each hour
daylight.test <- testset.hourly$V5
daytype.train <- rep(trainset.daily$V1,each=24) # 1 for working days, 0 for holidays
daytype.test <- rep(testset.daily$V1,each=24)
monthind.hourly <- rep(rep(c(1,2,3,4,5,6,7,8,9,10,11,12),c(31,28,31,30,31,30,31,31,30,31,30,31)),each=24) # corresponding month for each time step
hourind.hourly <- rep(c(1:24),365) # corresponding hour for each time step (1,2,...,23,24 is repeated 365 times)
itemindex <- rep(c(1:8760)) # neccesary for combining elements in the actual temporal order
dataset.train <- data.frame(actualpower.train, temperature.train, daylight.train, daytype.train, monthind.hourly, hourind.hourly,itemindex)
dataset.test <- data.frame(actualpower.test, temperature.test, daylight.test, daytype.test, monthind.hourly, hourind.hourly,itemindex)
names(dataset.train) <- c("power","temp","light","daytype","month","hour","itemindex")
names(dataset.test) <- c("power","temp","light","daytype","month","hour","itemindex")
## divide the dataset into four subperiods
dataset.train.holiday <- dataset.train[dataset.train$daytype==0,] # Holidays
dataset.train.workday <- dataset.train[dataset.train$daytype==1,] # Working days
dataset.train.springfall <- dataset.train.workday[dataset.train.workday$month %in% c(4,10),] # April, October
dataset.train.summer <- dataset.train.workday[dataset.train.workday$month %in% c(5,6,7,8,9),] # May ~ September
dataset.train.winter <- dataset.train.workday[dataset.train.workday$month %in% c(11,12,1,2,3),] # October ~ March
dataset.test.holiday <- dataset.test[dataset.test$daytype==0,]
dataset.test.workday <- dataset.test[dataset.test$daytype==1,]
dataset.test.springfall <- dataset.test.workday[dataset.test.workday$month %in% c(4,10),]
dataset.test.summer <- dataset.test.workday[dataset.test.workday$month %in% c(5,6,7,8,9),]
dataset.test.winter <- dataset.test.workday[dataset.test.workday$month %in% c(11,12,1,2,3),]
## using ONLY the training set (NOT the test set), fit the main linear model for each subperiod
## WLS for summer and winter (to correctly estimate peak power), OLS for spring/fall and holiday
model.train.springfall <- lm(power ~ factor(hour), data=dataset.train.springfall)
model.train.summer <- lm(power ~ temp*factor(month) + temp*factor(hour) + light*factor(month), data=dataset.train.summer, weight=power)
model.train.winter <- lm(power ~ temp*factor(month) + temp*factor(hour) + light*factor(month), data=dataset.train.winter, weight=power)
model.train.holiday <- lm(power ~ factor(month) + factor(hour), data=dataset.train.holiday)
## for the test set, compute predicted power and residuals using the main linear model fitted by the training set
predval.test.springfall <- data.frame(predict(model.train.springfall,dataset.test.springfall),dataset.test.springfall$itemindex)
predval.test.summer <- data.frame(predict(model.train.summer,dataset.test.summer),dataset.test.summer$itemindex)
predval.test.winter <- data.frame(predict(model.train.winter,dataset.test.winter),dataset.test.winter$itemindex)
predval.test.holiday <- data.frame(predict(model.train.holiday,dataset.test.holiday),dataset.test.holiday$itemindex)
resid.test.springfall <- dataset.test.springfall$power - predval.test.springfall[,1]
resid.test.summer <- dataset.test.summer$power - predval.test.summer[,1]
resid.test.winter <- dataset.test.winter$power - predval.test.winter[,1]
resid.test.holiday <- dataset.test.holiday$power - predval.test.holiday[,1]
## using ONLY the training residuals of the main linear models, fit the auxiliary SARMA models
## (do NOT use test residuals of the main linear models for fitting the auxiliary SARMA models)
## then, obtain the fitted values of auxiliary SARMA models for training and test residuals of the main linear models
if(using.sarma.resids){
Box.test(model.train.springfall$residuals,lag=24,type="Ljung",fitdf=0) # p-value near 0, indicating autocorrelation
autoarima.springfall <- auto.arima(model.train.springfall$residuals, max.d=0, allowdrift=FALSE, allowmean=FALSE)
sarma.springfall <- Arima(model.train.springfall$residuals,
order = c(autoarima.springfall$arma[1],0,autoarima.springfall$arma[2]),
seasonal= list(order = c(1,0,1), period=24), include.mean=FALSE)
Box.test(sarma.springfall$residuals,lag=24,type="Ljung",fitdf=0) # p-value should be over 0.1
auxfitval.train.springfall <- sarma.springfall$fitted
auxfitval.test.springfall <- Arima(resid.test.springfall, model=sarma.springfall)$fitted
Box.test(model.train.summer$residuals,lag=24,type="Ljung",fitdf=0)
autoarima.summer <- auto.arima(model.train.summer$residuals, max.d=0, allowdrift=FALSE, allowmean=FALSE)
sarma.summer <- Arima(model.train.summer$residuals,
order = c(autoarima.summer$arma[1],0,autoarima.summer$arma[2]),
seasonal= list(order = c(1,0,1), period=24), include.mean=FALSE)
Box.test(sarma.summer$residuals,lag=24,type="Ljung",fitdf=0)
auxfitval.train.summer <- sarma.summer$fitted
auxfitval.test.summer <- Arima(resid.test.summer, model=sarma.summer)$fitted
Box.test(model.train.winter$residuals,lag=24,type="Ljung",fitdf=0)
autoarima.winter <- auto.arima(model.train.winter$residuals, max.d=0, allowdrift=FALSE, allowmean=FALSE)
sarma.winter <- Arima(model.train.winter$residuals,
order = c(autoarima.winter$arma[1],0,autoarima.winter$arma[2]),
seasonal= list(order = c(1,0,1), period=24), include.mean=FALSE)
Box.test(sarma.winter$residuals,lag=24,type="Ljung",fitdf=0)
auxfitval.train.winter <- sarma.winter$fitted
auxfitval.test.winter <- Arima(resid.test.winter, model=sarma.winter)$fitted
Box.test(model.train.holiday$residuals,lag=24,type="Ljung",fitdf=0)
autoarima.holiday <- auto.arima(model.train.holiday$residuals, max.d=0, allowdrift=FALSE, allowmean=FALSE)
sarma.holiday <- Arima(model.train.holiday$residuals,
order = c(autoarima.holiday$arma[1],0,autoarima.holiday$arma[2]),
seasonal= list(order = c(1,0,1), period=24), include.mean=FALSE)
Box.test(sarma.holiday$residuals,lag=24,type="Ljung",fitdf=0)
auxfitval.train.holiday <- sarma.holiday$fitted
auxfitval.test.holiday <- Arima(resid.test.holiday, model=sarma.holiday)$fitted
## add the fitted values of auxiliary model to the fitted values of the main linear model
fitval.train.springfall <- data.frame(model.train.springfall$fitted.values +auxfitval.train.springfall,
dataset.train.springfall$itemindex)
fitval.train.summer <- data.frame(model.train.summer$fitted.values +auxfitval.train.summer,
dataset.train.summer$itemindex)
fitval.train.winter <- data.frame(model.train.winter$fitted.values +auxfitval.train.winter,
dataset.train.winter$itemindex)
fitval.train.holiday <- data.frame(model.train.holiday$fitted.values +auxfitval.train.holiday,
dataset.train.holiday$itemindex)
predval.test.springfall[,1] <- predval.test.springfall[,1] + auxfitval.test.springfall
predval.test.summer[,1] <- predval.test.summer[,1] + auxfitval.test.summer
predval.test.winter[,1] <- predval.test.winter[,1] + auxfitval.test.winter
predval.test.holiday[,1] <- predval.test.holiday[,1] + auxfitval.test.holiday
## when using.sarma.resids == FALSE, ignore the auxiliary SARMA model
} else {
fitval.train.springfall <- data.frame(model.train.springfall$fitted.values,
dataset.train.springfall$itemindex)
fitval.train.summer <- data.frame(model.train.summer$fitted.values,
dataset.train.summer$itemindex)
fitval.train.winter <- data.frame(model.train.winter$fitted.values,
dataset.train.winter$itemindex)
fitval.train.holiday <- data.frame(model.train.holiday$fitted.values,
dataset.train.holiday$itemindex)
}
## combine the values in the actual temporal order
fittedpower.train <- rep(0,8760)
for(i in 1:nrow(fitval.train.springfall)){
fittedpower.train[fitval.train.springfall[i,2]] = fitval.train.springfall[i,1]
}
for(i in 1:nrow(fitval.train.summer)){
fittedpower.train[fitval.train.summer[i,2]] = fitval.train.summer[i,1]
}
for(i in 1:nrow(fitval.train.winter)){
fittedpower.train[fitval.train.winter[i,2]] = fitval.train.winter[i,1]
}
for(i in 1:nrow(fitval.train.holiday)){
fittedpower.train[fitval.train.holiday[i,2]] = fitval.train.holiday[i,1]
}
predictedpower.test <- rep(0,8760)
for(i in 1:nrow(predval.test.springfall)){
predictedpower.test[predval.test.springfall[i,2]] = predval.test.springfall[i,1]
}
for(i in 1:nrow(predval.test.summer)){
predictedpower.test[predval.test.summer[i,2]] = predval.test.summer[i,1]
}
for(i in 1:nrow(predval.test.winter)){
predictedpower.test[predval.test.winter[i,2]] = predval.test.winter[i,1]
}
for(i in 1:nrow(predval.test.holiday)){
predictedpower.test[predval.test.holiday[i,2]] = predval.test.holiday[i,1]
}
## check whether the model is build well, based on adjusted R^2
adjrsq <- function(actual,estimate,k){
n <- length(actual)
sst <- sum((actual-mean(actual))^2)
ssr <- sum((actual-estimate)^2)
return(1 - (ssr/(n-k-1))/(sst/(n-k)) )
}
adjrsq.train <- adjrsq(actualpower.train,fittedpower.train,86)
adjrsq.test <- adjrsq(actualpower.test,predictedpower.test,86)
adjrsq.train
adjrsq.test # should be high enough
## Export the hourly fitted values (training set) and predicted power (test set)
write.table(fittedpower.train, "power_train_fit.txt",row.names=FALSE,col.names=FALSE)
write.table(predictedpower.test, "power_test_predict.txt",row.names=FALSE,col.names=FALSE)
